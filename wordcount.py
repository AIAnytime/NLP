# -*- coding: utf-8 -*-
"""wordcount.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vSdOug66UoRSxRwhgwykNtEyBtDNC1Lv
"""

import pandas as pd
pd.set_option("display.max_colwidth", -1)

data = pd.read_csv("drive/My Drive/NLP/out.csv")

data.head(5)

!pip install neattext

from collections import Counter
import neattext.functions as nfx

str1 = "Test Data health check and test data update for Automation Test cases: \r\nMost of the test cases automated has to deal with updating Test Data all the time before running the automation test cases. To avoid this if we introduce a test data health check step which will check if test data is correct and available in system and if not the self heal by updating the right data this way efficiency can be improved and we can move toward complete Automation solutioning"

str1 = str1.lower()

Counter(str1.split())

final_str1 = nfx.remove_stopwords(str1)

Counter(final_str1.split())

Counter(final_str1.split()).most_common(4)

def remove_shits(txt, num=5):
  txt1 = nfx.remove_puncts(txt)
  no_stop_words = nfx.remove_stopwords(txt1)
  most_common_tokens = dict(Counter(no_stop_words.split()).most_common(num))

  return most_common_tokens

first_func_output = remove_shits(str1)

first_func_output

import matplotlib.pyplot as plt

def plot_most_common_words(txt_data):
  plt.figure(figsize=(8,6))
  plt.title("Most common words used in this Idea", fontsize=20, color='#2C163D')
  barlist = plt.bar(txt_data.keys(), txt_data.values())
  barlist[0].set_color('#6794DD')
  barlist[1].set_color('#D76665')
  barlist[2].set_color('#F6B32A')
  barlist[3].set_color('#7D64D7')
  barlist[4].set_color('#80E91B')
  plt.yticks(fontsize=20)
  plt.xticks(rotation=45, fontsize=20)
  plt.show()

plot_most_common_words(first_func_output)

"""# for near future"""

from textblob import TextBlob

str1

str1 = ' '.join(dict.fromkeys(str1.split()))

str1

blob = TextBlob(str1)

blob

blob.words

blob.pos_tags

blob.